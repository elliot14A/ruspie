version: "3.7"

services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ../volumes/minio/data:/export
      - ../volumes/minio/config:/root/.minio
    environment:
      - MINIO_ROOT_USER=miniokey
      - MINIO_ROOT_PASSWORD=miniosecret
    command: server /export --console-address ":9001"
    networks:
      - ruspie

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    networks:
      - ruspie
    entrypoint: >
      /bin/sh -c " apk add --no-cache bash; wait-for-it.sh minio:9000 -- echo 'Minio is up. Creating the bucket!!'; /usr/bin/mc config host add myminio http://minio:9000 miniokey miniosecret; /usr/bin/mc mb myminio/ruspie; /usr/bin/mc policy set download myminio/ruspie; exit 0; "

  ruspie-api:
    build:
      context: ../ruspie
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    environment:
      - SOURCE=S3
      - DEFAULT_EXT=parquet
      - AWS_SECRET_ACCESS_KEY=miniosecret
      - AWS_ACCESS_KEY_ID=miniokey
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://minio:9000
      - PRE_FETCH_ENABLED=true
      - RUSPIE_PRE_FETCH_INTERVAL=60
      - MONGO_URI=mongodb://mongo:mongo@mongodb:27017
      - PRE_FETCH_SOURCE=mongo
      - OPENAI_ENDPOINT_URL=https://api.openai.com/v1/chat/completions
      - OPENAI_API_KEY=$OPENAI_API_KEY
      - TEXT_TO_SQL=true
    networks:
      - ruspie
    depends_on:
      - minio
      - mongodb

  robinpie-api:
    build:
      context: ../robinpie/
      dockerfile: Dockerfile
    environment:
      - AWS_SECRET_ACCESS_KEY=miniosecret
      - AWS_ACCESS_KEY_ID=miniokey
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://minio:9000
      - ROBINPIE_PRE_FETCH_INTERVAL=30
      - RUSPIE_URL=http://ruspie-api:8080
      - MONGO_URI=mongodb://mongo:mongo@mongodb:27017
      - PRE_FETCH_SOURCE=mongo
    networks:
      - ruspie
    depends_on:
      - minio
      - mongodb

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - ../volumes/mongo-data:/data/db
    networks:
      - ruspie
  ##########################################################################
  ######             DB SERVICES                                     #######
  ##########################################################################
  postgres:
    image: postgres:11.7-alpine
    ports:
      - "5432:5432"
    volumes:
      - ../pg-init-scripts:/docker-entrypoint-initdb.d
      - ../volumes/postgresql:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=ruspie
    healthcheck:
      interval: 10s
      retries: 10
      test: 'pg_isready -U "$$POSTGRES_USER" -d "kavach"'
      timeout: 2s
    networks:
      - ruspie

  ##########################################################################
  ######                  APP SERVICES                               #######
  ##########################################################################
  ruspie-migrate:
    build:
      context: ../studio/server
      dockerfile: Dockerfile.migrate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - wait_hosts=postgres:5432
    volumes:
      - ../studio/server:/app
    networks:
      - ruspie

  ruspie-server:
    build:
      context: ../studio/server
      dockerfile: Dockerfile.serve
    ports:
      - 8800:8800
    volumes:
      - ../studio/server:/app
    depends_on:
      - ruspie-migrate
    networks:
      - ruspie

  ruspie-web:
    build:
      context: ../studio/web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_SERVER_URL=http://localhost:8800
      - NEXT_PUBLIC_COMPANION_URL=http://localhost:3020
      - NEXT_PUBLIC_S3_URL=http://127.0.0.1:9000
    volumes:
      - type: bind
        source: ../studio/web
        target: /app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    stdin_open: true
    networks:
      - ruspie

  companion:
    image: transloadit/companion:sha-e80a7f7
    ports:
      - "3020:3020"
    env_file:
      - ../companion/.env
    networks:
      - ruspie

networks:
  ruspie:
